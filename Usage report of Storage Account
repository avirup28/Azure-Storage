
function BC {

  Write-Host "
  
  
  Displaying Blob in the form of StorageAccountName-BlobCount-BlobName-LastModifiedDate


  "
     
  foreach( $container in $containers) {

      $Name = $container.Name  
      $Count = $containers.Count        
      $blobs = Get-AzStorageBlob -Container $Name -Context $context

          foreach ($blob in $blobs) {

                 $LMD = $blob.LastModified.LocalDateTime
                 $LMdate = ($LMD -split ' ')[0]
                 $LMmonth = ($LMdate -split '/')[0]
                 $LMday = ($LMdate -split '/')[1]
                 $LMyear = ($LMdate -split '/')[2]
                 $MDiff = $Month -$LMmonth
                 $YDiff = $Year - $LMyear

                 if ( $YDiff -gt '0') {Write-Host "$AccountName;$Count;$Name;$LMD"}

                 else {
        
                     if ($MDiff -eq '0') {Write-Host "$AccountName;$Count;$Name;$LMD"}
        }
     }
   }
}

function F {

  Write-Host " 
  
  
  Displaying Files in the form of StorageAccountName-FileShareCount-FileName-DirectoryCount-DirectoryName
  
             
  "
     
  foreach( $file in $files) {

      $Name = $file.Name  
      $Count = $files.Count        
      $shares = Get-AzStorageFile -ShareName $Name -Context $context

          foreach ($share in $shares) {

                 $Dirs = Get-AzStorageFile -ShareName $Name -Path $share.Name -Context $context | Get-AzStorageFile

                    foreach ($Dir in $Dirs) {Write-Host "$AccountName;$Count;$Name;$($Dir.Count);$($Dir.Name)"}
             }
        }
   }

function T {

 Write-Host " 
 
 
 Displaying Table in the form of StorageAccountName-TableCount-TableName


 "     
  foreach( $table in $tables) {        

            $Output =New-Object -TypeName PSObject -Property @{
            StorageAccount = $AccountName
            TotalTables = $tables.Count
            table = $table.Name
            } | select StorageAccount,TotalTables,table

            Write-Host "$AccountName;$($table.Count);$($table.Name)"

            }
        }
     

function Q {
     
    Write-Host "
    
    
    Displaying Queue in the form of StorageAccountName-QueueCount-QueueName-MessageCount


    "

    foreach( $queue in $queues) {Write-Host "$AccountName;$($queues.Count);$($queues.Name);$($queue.ApproximateMessageCount)"}

        }


$Month = (Get-Date).Month
$Day = (Get-Date).Day
$Year = (Get-Date).Year        


$SAccounts = Get-AzStorageAccount -ResourceGroupName AZ-RG-CS-Automation-AP-01 -Name accountstorage321
# | where {$PSItem.Tags.Keys -eq "Stage" -and $PSItem.Tags.Values -eq "NonProd"}
foreach ($SAccount in $SAccounts) {


        $AccountName =$SAccount.StorageAccountName        
        $Key = Get-AzStorageAccountKey -Name $SAccount.StorageAccountName -ResourceGroupName $SAccount.ResourceGroupName
        $storageAccountKey = $key[0].Value
        $context = New-AzStorageContext -StorageAccountName $SAccount.StorageAccountName -StorageAccountKey $storageAccountKey

        $containers = Get-AzStorageContainer -Context $context
        $files = Get-AzStorageShare -Context $context
        $queues = Get-AzStorageQueue -Context $context
        $tables = Get-AzStorageTable -Context $context


        if ($Containers -ne $Null) { BC }
        else {Write-Host "$AccountName has no containers"}

        if ($files -ne $Null) { F }
        else {Write-Host "$AccountName has no File share"}

        if ($queue -ne $Null) { Q }
        else {Write-Host "$AccountName has no Queue"}

        if ($table -ne $Null) { T }
        else {Write-Host "$AccountName has no Table"}

        }


              

function BC {

  Write-Host "
  
  
  Displaying Blob in the form of StorageAccountName-BlobCount-BlobName-LastModifiedDate


  "
     
  foreach( $container in $containers) {

      $Name = $container.Name  
      $Count = $containers.Count        
      $blobs = Get-AzStorageBlob -Container $Name -Context $context

          foreach ($blob in $blobs) {

                 $LMD = $blob.LastModified.LocalDateTime
                 $LMdate = ($LMD -split ' ')[0]
                 $LMmonth = ($LMdate -split '/')[0]
                 $LMday = ($LMdate -split '/')[1]
                 $LMyear = ($LMdate -split '/')[2]
                 $MDiff = $Month -$LMmonth
                 $YDiff = $Year - $LMyear

                 if ( $YDiff -gt '0') {Write-Host "$AccountName;$Count;$Name;$LMD"}

                 else {
        
                     if ($MDiff -eq '0') {Write-Host "$AccountName;$Count;$Name;$LMD"}
        }
     }
   }
}

function F {

  Write-Host " 
  
  
  Displaying Files in the form of StorageAccountName-FileShareCount-FileName-DirectoryCount-DirectoryName
  
             
  "
     
  foreach( $file in $files) {

      $Name = $file.Name  
      $Count = $files.Count        
      $shares = Get-AzStorageFile -ShareName $Name -Context $context

          foreach ($share in $shares) {

                 $Dirs = Get-AzStorageFile -ShareName $Name -Path $share.Name -Context $context | Get-AzStorageFile

                    foreach ($Dir in $Dirs) {Write-Host "$AccountName;$Count;$Name;$($Dir.Count);$($Dir.Name)"}
             }
        }
   }

function T {

 Write-Host " 
 
 
 Displaying Table in the form of StorageAccountName-TableCount-TableName


 "     
  foreach( $table in $tables) {        

            $Output =New-Object -TypeName PSObject -Property @{
            StorageAccount = $AccountName
            TotalTables = $tables.Count
            table = $table.Name
            } | select StorageAccount,TotalTables,table

            Write-Host "$AccountName;$($table.Count);$($table.Name)"

            }
        }
     

function Q {
     
    Write-Host "
    
    
    Displaying Queue in the form of StorageAccountName-QueueCount-QueueName-MessageCount


    "

    foreach( $queue in $queues) {Write-Host "$AccountName;$($queues.Count);$($queues.Name);$($queue.ApproximateMessageCount)"}

        }


$Month = (Get-Date).Month
$Day = (Get-Date).Day
$Year = (Get-Date).Year        


$SAccounts = Get-AzStorageAccount | where {$PSItem.Tags.Keys -eq "Stage" -and $PSItem.Tags.Values -eq "NonProd"}
foreach ($SAccount in $SAccounts) {


        $AccountName =$SAccount.StorageAccountName        
        $Key = Get-AzStorageAccountKey -Name $SAccount.StorageAccountName -ResourceGroupName $SAccount.ResourceGroupName
        $storageAccountKey = $key[0].Value
        $context = New-AzStorageContext -StorageAccountName $SAccount.StorageAccountName -StorageAccountKey $storageAccountKey

        $containers = Get-AzStorageContainer -Context $context
        $files = Get-AzStorageShare -Context $context
        $queues = Get-AzStorageQueue -Context $context
        $tables = Get-AzStorageTable -Context $context


        if ($Containers -ne $Null) { BC }
        else {Write-Host "$AccountName has no containers"}

        if ($files -ne $Null) { F }
        else {Write-Host "$AccountName has no File share"}

        if ($queue -ne $Null) { Q }
        else {Write-Host "$AccountName has no Queue"}

        if ($table -ne $Null) { T }
        else {Write-Host "$AccountName has no Table"}

        }


              
