
function BC {

  Write-Host "
  
  
Displaying Blob in the form of StorageAccountName-ContainerCount-ContainerName-BlobCount-BlobName-LastModifiedDate


  "
     
  foreach( $container in $containers) {

      $Name = $container.Name  
      $Count = $containers.Count        
      $blobs = Get-AzStorageBlob -Container $Name -Context $context

          foreach ($blob in $blobs) {

                 $LMD = $blob.LastModified.LocalDateTime
                 $Date = $LMD.ToShortDateString()
                 $LMdate = ($LMD -split ' ')[0]
                 $LMmonth = ($LMdate -split '/')[0]
                 $LMday = ($LMdate -split '/')[1]
                 $LMyear = ($LMdate -split '/')[2]
                 $MDiff = $Month -$LMmonth
                 $YDiff = $Year - $LMyear

                 if ( $YDiff -gt '0') {Write-Host "$AccountName;$Count;$Name;$Date"}

                 else {
        
                     if ($MDiff -gt '1') {Write-Host "$AccountName;$Count;$Name;$($blobs.Count);$($blob.Name);$Date"}
        }
     }
   }
}

function F {

  Write-Host " 
  
  
Displaying Files in the form of StorageAccountName-FileCount-FileName-DirectoryCount
  
             
  "
     
  foreach( $file in $files) {

      $Name = $file.Name  
      $Count = $files.Count
      $DirCount = (Get-AzStorageFile -ShareName $file.Name -Context $context).count        

      Write-Host "$AccountName;$Count;$Name;$DirCount"}
      
       }
  

function T {

 Write-Host " 
 
 
Displaying Table in the form of StorageAccountName-TableCount-TableName


 "     
  foreach( $table in $tables) {Write-Host "$AccountName;$($table.Count);$($table.Name)"}
       
        }
     

function Q {
     
    Write-Host "
    
    
Displaying Queue in the form of StorageAccountName-QueueCount-QueueName-MessageCount


    "

    foreach( $queue in $queues) {Write-Host "$AccountName;$($queues.Count);$($queues.Name);$($queue.ApproximateMessageCount)"}

        }


$Month = (Get-Date).Month
$Day = (Get-Date).Day
$Year = (Get-Date).Year        


$SAccounts = Get-AzStorageAccount | where {$PSItem.Tags.Keys -eq "Stage" -and $PSItem.Tags.Values -eq "NonProd"}

foreach ($SAccount in $SAccounts) {

        $AccountName =$SAccount.StorageAccountName 
          
        if ($AccountName -notmatch ("azcscloudteam|logextconsumerap01|logextconsumereu01|logextconsumereuna01|allwebapplogsap|allwebapplogseu|allwebapplogsna")) {

        Write-Host "
        
                    Checking for $AccountName 
        
        "
             
        $Key = Get-AzStorageAccountKey -Name $SAccount.StorageAccountName -ResourceGroupName $SAccount.ResourceGroupName
        $storageAccountKey = $key[0].Value
        $context = New-AzStorageContext -StorageAccountName $SAccount.StorageAccountName -StorageAccountKey $storageAccountKey

        $containers = Get-AzStorageContainer -Context $context
        $files = Get-AzStorageShare -Context $context
        $queues = Get-AzStorageQueue -Context $context
        $tables = Get-AzStorageTable -Context $context


        if ($Containers -ne $Null) { BC }
        else {Write-Host "
        
$AccountName has no containers
        
        
        "}

        if ($files -ne $Null) { F }
        else {Write-Host "
        
$AccountName has no File share
        
        "}

        if ($queues -ne $Null) { Q }
        else {Write-Host "
        
$AccountName has no Queue
        
        "}

        if ($tables -ne $Null) { T }
        else {Write-Host "
        
$AccountName has no Table
        
        "}

        }

        else {Write-Host "
        
$AccountName is added under exception list
        
        "}

    }

              
